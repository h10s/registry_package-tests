name: "Log package published"
on:
  registry_package:

jobs:
  update-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - run: cat $GITHUB_EVENT_PATH

      - run: printenv

      - uses: actions/github-script@v4
        with:
          script: |
            let title, body
            switch (context.eventName) {
              case "pull_request":
                title = context.payload.pull_request.title
                body = context.payload.pull_request.number
                break

              case "registry_package":
                title = context.payload.registry_package.name
                body = context.payload.registry_package.package_version.version 
                break

              default:
                title = context.eventName
                body = context.action ? context.action : "something"
            }

            console.log(title)
            console.log(body)

            // search for an existing issue with the same title
            // https://github.com/actions/github-script#welcome-a-first-time-contributor shows a different way to do pagination
            issues = await github.paginate(
              github.issues.listForRepo,
              { owner: context.repo.owner, repo: context.repo.repo },
              (response) => response.data.map((issue) => { return { number: issue.number, title: issue.title } }))

            let issue = issues.find(i => i.title === title)
            if (issue === undefined) {
              console.log("creating new issue...")
              issue = await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body: `Each event is tracked by a comment below ðŸ‘‡`,
              })
              console.log("created")
            } else {
              console.log("existing issue found")
            }
            
            let deadline = Date.now() + 4000
            while (Date.now() < deadline) {
              try {
                console.log("adding issue comment...")
                await github.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body,
                })
                console.log("added")
                break
              } catch (error) {
                 console.log(error)
              }
              await new Promise(resolve => setTimeout(resolve, 100))
            }
